{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/epi2me-labs/wf-basecalling/master/nextflow_schema.json",
    "title": "epi2me-labs/wf-basecalling",
    "description": "Helper workflow for basecalling ONT data",
    "demo_url": "https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-basecalling/wf-basecalling-demo.tar.gz",
    "url": "https://github.com/epi2me-labs/wf-basecalling",
    "type": "object",
    "definitions": {
        "input": {
            "title": "Input Options",
            "type": "object",
            "fa_icon": "fas fa-arrow-right",
            "description": "Parameters for finding and handling input data for analysis.",
            "properties": {
                "input": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Directory containing FAST5 (or POD5) signal for basecalling.",
                    "help_text": "This directory will be searched recursively. All FAST5 or POD5 files (depending on which extension you select in the Basecalling Options) in this directory or any subdirectory (no matter how deep) will be basecalled."
                },
                "ref": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Reference FASTA file to align basecalled reads to.",
                    "help_text": "Take care to retain this reference FASTA as the output CRAM files cannot be read without this reference."
                }
            },
            "required": [
                "input",
                "ref"
            ]
        },
        "output": {
            "title": "Output Options",
            "type": "object",
            "fa_icon": "fas fa-arrow-left",
            "description": "Parameters for saving and naming workflow outputs.",
            "properties": {
                "out_dir": {
                    "type": "string",
                    "default": "output",
                    "format": "directory-path",
                    "description": "Directory for output of all files."
                },
                "sample_name": {
                    "type": "string",
                    "default": "SAMPLE",
                    "description": "Sample name to prefix file names of workflow outputs."
                }
            }
        },
        "basecalling_options": {
            "title": "Basecalling options",
            "type": "object",
            "fa_icon": "fas fa-gear",
            "description": "Basecalling model selection.",
            "help_text": "This section contains options that should be checked before basecalling.",
            "properties": {
                "basecaller_cfg": {
                    "type": "string",
                    "description": "Name of the model to use for converting signal.",
                    "help_text": "Required for basecalling. Refer to the [model table on the Dorado repository for selecting a simplex basecalling model](https://github.com/nanoporetech/dorado#available-basecalling-models)."
                },
                "remora_cfg": {
                    "type": "string",
                    "description": "Name of the model to use for calling modified bases.",
                    "help_text": "Required for calling modified bases while basecalling. Refer to the [model table on the Dorado repository for selecting a modified basecalling model](https://github.com/nanoporetech/dorado#available-basecalling-models)."
                },
                "dorado_ext": {
                    "type": "string",
                    "description": "File extension for Dorado input.",
                    "help_text": "Set this to fast5 if you have not converted your fast5 to pod5. It is recommended to [convert existing fast5 files to pod5 for use with Dorado](https://github.com/nanoporetech/pod5-file-format/blob/master/python/README.md#pod5-convert-from-fast5).",
                    "default": "fast5",
                    "enum": [
                        "fast5",
                        "pod5"
                    ]
                },
                "basecaller_basemod_threads": {
                    "type": "number",
                    "default": 2,
                    "description": "Number of threads to use for base modification calling.",
                    "help_text": "You must set this to > 0 when using a modbase aware model. Modbase calling does not require much additional CPU and should be set carefully when using GPU servers with a small number of CPUs per GPU."
                }
            },
            "required": [
                "basecaller_cfg"
            ]
        },
        "advanced_basecalling_options": {
            "title": "Advanced basecalling options",
            "type": "object",
            "fa_icon": "fas fa-gears",
            "description": "Basecaller performance and load settings.",
            "help_text": "These basecalling options do not typically need to be changed.",
            "properties": {
                "qscore_filter": {
                    "type": "number",
                    "default": 10,
                    "description": "Mean qscore by which to filter reads. Inclusive such that reads with score >= qscore_filter are kept.",
                    "help_text": "The mean qscore of reads is calculated by dorado and rounded to an integer by dorado and stored as a tag in dorado's SAM output. The pipeline separates reads into pass and fail categories based on this SAM tag."
                },
                "basecaller_chunk_size": {
                    "type": "number",
                    "default": 25,
                    "description": "Number of input files to basecall in each basecalling process.",
                    "hidden": true
                },
                "cuda_device": {
                    "type": "string",
                    "default": "cuda:all",
                    "description": "GPU device to use for basecalling [cuda:all]",
                    "help_text": "For local execution this can be used to pin GPU tasks to one (or more) specific GPU devices. Use cuda:all to use all available GPU devices, or cuda:<idx>[,idx,...] where idx is an index number of a GPU device to use."
                },
                "basecaller_model_path": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Override the inferred model with a custom basecalling model",
                    "help_text": "For typical use, users should set --basecaller_cfg which will use a named model from inside the container. Experimental or custom basecallers will not be available in the container and can be loaded from the host with --basecaller_model_path."
                },
                "remora_model_path": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Override the inferred model with a custom remora model",
                    "help_text": "For typical use, users should set --remora_cfg which will use a named model from inside the container. Experimental or custom models will not be available in the container and can be loaded from the host with --remora_model_path."
                }
            },
            "required": []
        },
        "multiprocessing_options": {
            "title": "Multiprocessing Options",
            "type": "object",
            "fa_icon": "far fa-gauge-high",
            "description": "Advanced options for configuring the performance of specific workflow processes.",
            "help_text": "These options do not need to be changed for typical use, but allow fine tuning of workflows for users who want more control over the workflow.",
            "properties": {
                "ubam_map_threads": {
                    "type": "integer",
                    "default": 8,
                    "description": "Set max number of threads to use for aligning reads from uBAM (limited by config executor cpus)"
                },
                "ubam_sort_threads": {
                    "type": "integer",
                    "default": 3,
                    "description": "Set max number of threads to use for sorting and indexing aligned reads from uBAM (limited by config executor cpus)"
                },
                "ubam_bam2fq_threads": {
                    "type": "integer",
                    "default": 1,
                    "description": "Set max number of threads to use for uncompressing uBAM and generating FASTQ for alignment (limited by config executor cpus)"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "far fa-question-circle",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "disable_ping": {
                    "type": "boolean",
                    "default": false,
                    "description": "Disable workflow ping."
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input"
        },
        {
            "$ref": "#/definitions/output"
        },
        {
            "$ref": "#/definitions/basecalling_options"
        },
        {
            "$ref": "#/definitions/advanced_basecalling_options"
        },
        {
            "$ref": "#/definitions/multiprocessing_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ],
    "properties": {
        "aws_image_prefix": {
            "type": "string",
            "hidden": true
        },
        "aws_queue": {
            "type": "string",
            "hidden": true
        },
        "wfversion": {
            "type": "string",
            "default": "v0.1.1",
            "hidden": true
        },
        "monochrome_logs": {
            "type": "boolean"
        },
        "validate_params": {
            "type": "boolean",
            "default": true
        },
        "show_hidden_params": {
            "type": "boolean"
        }
    },
    "docs": {
        "intro": "## Introduction\n\nThis workflow introduces users to [`Dorado`](https://github.com/nanoporetech/dorado),\nour alpha-release basecaller. `dorado` is still under active development and\nhas been released for evaluation purposes. This workflow will be kept updated\nas new releases are made. We strongly encourage users to check the CHANGELOG for\nbreaking changes.\n",
        "links": "## Useful links\n\n* [nextflow](https://www.nextflow.io/)\n* [docker](https://www.docker.com/products/docker-desktop)\n* [singularity](https://sylabs.io/singularity/)\n* [dorado](https://github.com/nanoporetech/dorado/)\n"
    }
}